version: '3.8'

services:
  snowflake-mcp:
    build:
      context: ../..
      dockerfile: deploy/docker/Dockerfile
    image: snowflake-mcp-server:latest
    container_name: snowflake-mcp-server
    restart: unless-stopped
    ports:
      - "8000:8000"  # HTTP/WebSocket API
      - "8001:8001"  # Metrics endpoint
    environment:
      # Snowflake connection
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      
      # Server configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
      - LOG_LEVEL=INFO
      
      # Connection pool
      - CONNECTION_POOL_MIN_SIZE=3
      - CONNECTION_POOL_MAX_SIZE=10
      
      # Monitoring
      - ENABLE_MONITORING=true
      - METRICS_PORT=8001
      
      # Security
      - ENABLE_RATE_LIMITING=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=120
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - snowflake-mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: snowflake-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - snowflake-mcp-network
    depends_on:
      - snowflake-mcp

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: snowflake-mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - snowflake-mcp-network
    depends_on:
      - prometheus

  # Optional: Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: snowflake-mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - snowflake-mcp-network
    command: redis-server --appendonly yes

networks:
  snowflake-mcp-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  redis_data: