[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snowflake-mcp-server"
version = "0.2.0"
description = "MCP server for performing read-only operations against Snowflake"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
dependencies = [
    "snowflake-connector-python>=3.8.0",
    "pydantic>=2.4.2",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
    "mcp",
    "anyio>=3.7.1",
    "sqlglot>=11.5.5",
    "asyncpg>=0.28.0",
    "asyncio-pool>=0.6.0",
    "aiofiles>=23.2.0",
    "fastapi>=0.115.13",
    "uvicorn>=0.34.0",
    "websockets>=15.0.1",
    "python-multipart>=0.0.20",
    "httpx>=0.28.1",
    "prometheus-client>=0.22.1",
    "structlog>=25.4.0",
    "tenacity>=9.1.2",
    "slowapi>=0.1.9",
]

[project.scripts]
snowflake-mcp = "snowflake_mcp_server.main:run_stdio_server"
snowflake-mcp-stdio = "snowflake_mcp_server.main:run_stdio_server"
snowflake-mcp-http = "snowflake_mcp_server.main:run_http_server"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]  # Ignore line too long errors

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.0.0",
]
